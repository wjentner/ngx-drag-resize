{"version":3,"file":"ngx-drag-resize.mjs","sources":["../../../projects/ngx-drag-resize/src/lib/shared/boundary/boundary.directive.ts","../../../projects/ngx-drag-resize/src/lib/core/window.token.ts","../../../projects/ngx-drag-resize/src/lib/core/drag.service.ts","../../../projects/ngx-drag-resize/src/lib/drag/drag.directive.ts","../../../projects/ngx-drag-resize/src/lib/drag/drag-handle.directive.ts","../../../projects/ngx-drag-resize/src/lib/resize/resize-handle-type.enum.ts","../../../projects/ngx-drag-resize/src/lib/resize/resize.directive.ts","../../../projects/ngx-drag-resize/src/lib/resize/resize-handle.directive.ts","../../../projects/ngx-drag-resize/src/lib/shared/shared.module.ts","../../../projects/ngx-drag-resize/src/lib/drag-resize.module.ts","../../../projects/ngx-drag-resize/src/public-api.ts","../../../projects/ngx-drag-resize/src/ngx-drag-resize.ts"],"sourcesContent":["import {Directive} from '@angular/core';\r\nimport {Boundary} from './boundary';\r\n\r\n/**\r\n * The directive is used to work with boundary area for HTML element\r\n *\r\n * @author Dmytro Parfenov <dmitryparfenov937@gmail.com>\r\n *\r\n * @internal\r\n *\r\n * @dynamic\r\n * @see https://angular.io/guide/angular-compiler-options#strictmetadataemit\r\n */\r\n@Directive({\r\n  selector: '[ngxBoundary]',\r\n})\r\nexport class BoundaryDirective {\r\n  /**\r\n   * CSS selector or HTML element\r\n   */\r\n  protected boundary: string | HTMLElement | Window | null = null;\r\n\r\n  constructor(private readonly windowObject?: Window, private readonly documentObject?: Document) {}\r\n\r\n  /**\r\n   * Get boundary position based on {@link boundary}\r\n   */\r\n  protected getBoundary(): Boundary | null {\r\n    const rect = {} as Boundary;\r\n\r\n    const boundaryElement = this.resolveBoundaryElement();\r\n\r\n    if (boundaryElement instanceof Element) {\r\n      const boundaryElementRect = boundaryElement.getBoundingClientRect();\r\n\r\n      rect.left = boundaryElementRect.left;\r\n      rect.top = boundaryElementRect.top;\r\n      rect.bottom = boundaryElementRect.bottom;\r\n      rect.right = boundaryElementRect.right;\r\n\r\n      return rect;\r\n    }\r\n\r\n    if (boundaryElement instanceof Window && this.windowObject) {\r\n      rect.top = 0;\r\n      rect.left = 0;\r\n      rect.right = this.windowObject.innerWidth;\r\n      rect.bottom = this.windowObject.innerHeight;\r\n\r\n      return rect;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Resolves HTML element based on {@link boundary}\r\n   */\r\n  protected resolveBoundaryElement(): Element | Window | null {\r\n    if (!this.boundary) {\r\n      return null;\r\n    }\r\n\r\n    if (this.boundary === 'window' && this.windowObject) {\r\n      return this.windowObject;\r\n    }\r\n\r\n    if (typeof this.boundary === 'string') {\r\n      return this.documentObject ? this.documentObject.querySelector(this.boundary) : null;\r\n    }\r\n\r\n    return this.boundary;\r\n  }\r\n\r\n  /**\r\n   * Returns positional value based on boundary position\r\n   */\r\n  protected basedOnBoundary(value: number, position: 'left' | 'top'): number {\r\n    const boundary = this.getBoundary();\r\n\r\n    if (!boundary) {\r\n      return value;\r\n    }\r\n\r\n    switch (position) {\r\n      case 'left':\r\n        return value - boundary.left;\r\n      case 'top':\r\n        return value - boundary.top;\r\n    }\r\n\r\n    return value;\r\n  }\r\n}\r\n","import {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * A DI Token representing the window object.\r\n *\r\n * Note: might not be available in the Application Context when Application and Rendering\r\n * Contexts are not the same (e.g. when running the application in a Web Worker or Server).\r\n *\r\n * @internal\r\n */\r\nexport const WINDOW = new InjectionToken<Window | null>('lib.window', {\r\n  factory: () => (typeof window !== 'undefined' ? window : null)\r\n});\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { EMPTY, fromEvent, merge, Observable } from 'rxjs';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { map, switchMap, takeUntil, tap } from 'rxjs/operators';\r\nimport { MovementNative } from './movement/movement-native';\r\nimport { PositionBase } from './position-base';\r\nimport { MovementBase } from './movement/movement-base';\r\nimport { WINDOW } from './window.token';\r\n\r\n/**\r\n * The service that allows to observe the element dragging\r\n *\r\n * @author Dmytro Parfenov <dmitryparfenov937@gmail.com>\r\n *\r\n * @internal\r\n *\r\n * @dynamic\r\n * @see https://angular.io/guide/angular-compiler-options#strictmetadataemit\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DragService {\r\n  /**\r\n   * Emits on mouse or touch event was ended\r\n   */\r\n  // private readonly leave$ = merge(\r\n  //   fromEvent<MovementNative>(this.document, 'mouseup'),\r\n  //   fromEvent<MovementNative>(this.document, 'touchend')\r\n  // );\r\n\r\n  /**\r\n   * Emits on mouse or touch move\r\n   */\r\n  // private readonly move$ = merge(\r\n  //   fromEvent<MovementNative>(this.window, 'mousemove'),\r\n  //   fromEvent<MovementNative>(this.window, 'touchmove')\r\n  // );\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) private readonly document: Document,\r\n    @Inject(WINDOW) private readonly window: Window\r\n  ) { }\r\n\r\n  /**\r\n   * Creates an observable that emits drag event\r\n   */\r\n  fromElement(target: HTMLElement): Observable<MovementBase> {\r\n    if (!this.document) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const enter$ = merge(\r\n      fromEvent<MovementNative>(target, 'mousedown'),\r\n      fromEvent<MovementNative>(target, 'touchstart')\r\n    );\r\n\r\n    return enter$.pipe(\r\n      tap((event) => event.preventDefault()),\r\n      map((event) => this.fromEnter(event)),\r\n      switchMap((event) => this.forMove(event))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns position of mouse or touch event\r\n   */\r\n  private fromMovementNativeEvent(event: MovementNative): PositionBase {\r\n    let x = 0;\r\n    let y = 0;\r\n\r\n    if (!this.window) {\r\n      return { x, y };\r\n    }\r\n\r\n    if ('TouchEvent' in this.window && event instanceof TouchEvent) {\r\n      const touch = event.touches.length ? event.touches.item(0) : null;\r\n      x = touch ? touch.clientX : 0;\r\n      y = touch ? touch.clientY : 0;\r\n    }\r\n\r\n    if (event instanceof MouseEvent) {\r\n      x = event.clientX;\r\n      y = event.clientY;\r\n    }\r\n\r\n    return { x, y };\r\n  }\r\n\r\n  /**\r\n   * Returns position of event when drag was started\r\n   */\r\n  private fromEnter(event: MovementNative): PositionBase {\r\n    return this.fromMovementNativeEvent(event);\r\n  }\r\n\r\n  /**\r\n   * Implements behaviour to detect drag events\r\n   */\r\n  private forMove(initial: PositionBase): Observable<MovementBase> {\r\n\r\n    return merge(\r\n      fromEvent<MovementNative>(this.window, 'mousemove'),\r\n      fromEvent<MovementNative>(this.window, 'touchmove')\r\n    ).pipe(\r\n      map((event) => {\r\n        const positionBase = this.fromMovementNativeEvent(event);\r\n\r\n        return {\r\n          ...positionBase,\r\n          initial,\r\n          nativeEvent: event,\r\n        };\r\n      }),\r\n      takeUntil(merge(\r\n        fromEvent<MovementNative>(this.document, 'mouseup'),\r\n        fromEvent<MovementNative>(this.document, 'touchend')\r\n      ))\r\n    );\r\n\r\n    // return this.move$.pipe(\r\n    //   map((event) => {\r\n    //     const positionBase = this.fromMovementNativeEvent(event);\r\n\r\n    //     return {\r\n    //       ...positionBase,\r\n    //       initial,\r\n    //       nativeEvent: event,\r\n    //     };\r\n    //   }),\r\n    //   takeUntil(this.leave$)\r\n    // );\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  PLATFORM_ID,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil, tap } from 'rxjs/operators';\r\nimport { DOCUMENT, isPlatformServer } from '@angular/common';\r\nimport { BoundaryDirective } from '../shared/boundary/boundary.directive';\r\nimport { PositionStrategy } from './position-strategy';\r\nimport { Axis } from '../core/axis';\r\nimport { NgxDrag } from './drag';\r\nimport { DragService } from '../core/drag.service';\r\nimport { WINDOW } from '../core/window.token';\r\nimport { MovementBase } from '../core/movement/movement-base';\r\nimport { Movement } from '../core/movement/movement';\r\nimport { Boundary } from '../shared/boundary/boundary';\r\nimport { PositionBase } from '../core/position-base';\r\n\r\n/**\r\n * The directive that allows to drag HTML element on page\r\n *\r\n * @author Dmytro Parfenov <dmitryparfenov937@gmail.com>\r\n *\r\n * @dynamic\r\n * @see https://angular.io/guide/angular-compiler-options#strictmetadataemit\r\n */\r\n@Directive({\r\n  selector: '[ngxDrag]',\r\n})\r\nexport class NgxDragDirective extends BoundaryDirective implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Initial size and position of host element\r\n   */\r\n  private hostElementRectInitial: {\r\n    left: number;\r\n    top: number;\r\n  } | null = null;\r\n\r\n  /**\r\n   * Emits when directive was destroyed\r\n   */\r\n  private destroy$ = new Subject();\r\n\r\n  /**\r\n   * Emits when observable target was changed\r\n   */\r\n  private observableTargetChange$ = new Subject();\r\n\r\n  /**\r\n   * Define positioning strategy.\r\n   *\r\n   * 'free' - position will changing by 'transform: translate3d()' style\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d\r\n   *\r\n   * 'relative' - position will changing by 'top' and 'left' style\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/position\r\n   *\r\n   * Default is 'free'.\r\n   */\r\n  @Input() ngxDragPositionStrategy: PositionStrategy = 'free';\r\n\r\n  /**\r\n   * Locks axis for the dragging\r\n   */\r\n  @Input() ngxDragLockAxis: Axis = null;\r\n\r\n  /**\r\n   * Disable any drag events\r\n   */\r\n  @Input() ngxDragDisabled = false;\r\n\r\n  /**\r\n   * Constrain for the dragging element.\r\n   * Can be as a HTMLElement or CSS selector.\r\n   * You can put 'window' string to define window object as a constrain.\r\n   */\r\n  @Input() set ngxDragBoundary(boundary: string | HTMLElement) {\r\n    this.boundary = boundary;\r\n  }\r\n\r\n  /**\r\n   * Emits changes when element was dragged\r\n   */\r\n  @Output() ngxDragged = new EventEmitter<NgxDrag>();\r\n\r\n  constructor(\r\n    private readonly elementRef: ElementRef<HTMLElement>,\r\n    private readonly renderer: Renderer2,\r\n    private readonly dragService: DragService,\r\n    @Inject(WINDOW) private readonly window: Window,\r\n    @Inject(DOCUMENT) private readonly document: Document,\r\n    @Inject(PLATFORM_ID) private readonly platformId: object\r\n  ) {\r\n    super(window, document);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  ngOnInit(): void {\r\n    if (isPlatformServer(this.platformId)) {\r\n      return;\r\n    }\r\n\r\n    this.observe();\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next(true);\r\n    this.destroy$.complete();\r\n    this.observableTargetChange$.complete();\r\n  }\r\n\r\n  /**\r\n   * Observe the element dragging which will be as handle for dragging\r\n   */\r\n  observe(target = this.elementRef.nativeElement): void {\r\n    this.observableTargetChange$.next(true);\r\n\r\n    let hostElementRect = this.elementRef.nativeElement.getBoundingClientRect();\r\n    let eventInitial: PositionBase | null = null;\r\n\r\n    this.dragService\r\n      .fromElement(target)\r\n      .pipe(\r\n        tap((event) => event.nativeEvent.preventDefault()),\r\n        map<MovementBase, Movement>((event) => {\r\n          if (\r\n            !eventInitial ||\r\n            eventInitial.x !== event.initial.x ||\r\n            eventInitial.y !== event.initial.y\r\n          ) {\r\n            eventInitial = event.initial;\r\n            hostElementRect = this.elementRef.nativeElement.getBoundingClientRect();\r\n\r\n            if (!this.hostElementRectInitial) {\r\n              this.updateInitialRect();\r\n            }\r\n          }\r\n\r\n          const offsetFromHost = {\r\n            top: event.initial.y - hostElementRect.top,\r\n            left: event.initial.x - hostElementRect.left,\r\n            bottom: hostElementRect.bottom - event.initial.y,\r\n            right: hostElementRect.right - event.initial.x,\r\n          } as Boundary;\r\n\r\n          return {\r\n            ...event,\r\n            initiator: target,\r\n            offsetFromHost,\r\n            initial: event.initial,\r\n          };\r\n        }),\r\n        tap(this.onDrag.bind(this)),\r\n        takeUntil(this.destroy$),\r\n        takeUntil(this.observableTargetChange$)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Update size and position of host element\r\n   */\r\n  private updateInitialRect(): void {\r\n    if (!this.window) {\r\n      return;\r\n    }\r\n\r\n    const rect = this.elementRef.nativeElement.getBoundingClientRect();\r\n\r\n    this.hostElementRectInitial = {\r\n      left: this.window.scrollX + rect.left,\r\n      top: this.window.scrollY + rect.top,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Starts the calculation of drag event and changes host position\r\n   */\r\n  private onDrag(event: Movement): void {\r\n    if (this.ngxDragDisabled) {\r\n      return;\r\n    }\r\n\r\n    const hostElementRect = this.elementRef.nativeElement.getBoundingClientRect();\r\n    const boundaryRect = this.getBoundary();\r\n\r\n    let left = event.x - event.offsetFromHost.left;\r\n    let top = event.y - event.offsetFromHost.top;\r\n\r\n    if (boundaryRect) {\r\n      left = Math.max(boundaryRect.left, left);\r\n      left = Math.min(\r\n        boundaryRect.left + (boundaryRect.right - boundaryRect.left) - hostElementRect.width,\r\n        left\r\n      );\r\n\r\n      top = Math.max(boundaryRect.top, top);\r\n      top = Math.min(\r\n        boundaryRect.top + (boundaryRect.bottom - boundaryRect.top) - hostElementRect.height,\r\n        top\r\n      );\r\n    }\r\n\r\n    if (this.ngxDragPositionStrategy === 'free' && this.hostElementRectInitial) {\r\n      left = left - this.hostElementRectInitial.left + this.window.scrollX;\r\n      top = top - this.hostElementRectInitial.top + this.window.scrollY;\r\n\r\n      if (this.ngxDragLockAxis === 'y') {\r\n        top = hostElementRect.top - this.hostElementRectInitial.top + this.window.scrollY;\r\n      }\r\n\r\n      if (this.ngxDragLockAxis === 'x') {\r\n        left = hostElementRect.left - this.hostElementRectInitial.left + this.window.scrollX;\r\n      }\r\n\r\n      this.updateHostStyle('transform', `translate3d(${left}px, ${top}px, 0)`);\r\n      this.emitDrag(event.nativeEvent);\r\n      return;\r\n    }\r\n\r\n    if (this.ngxDragLockAxis === 'x') {\r\n      this.updateHostStyle('top', `${this.basedOnBoundary(top, 'top')}px`);\r\n      this.emitDrag(event.nativeEvent);\r\n      return;\r\n    }\r\n\r\n    if (this.ngxDragLockAxis === 'y') {\r\n      this.updateHostStyle('left', `${this.basedOnBoundary(left, 'left')}px`);\r\n      this.emitDrag(event.nativeEvent);\r\n      return;\r\n    }\r\n\r\n    this.updateHostStyle('left', `${this.basedOnBoundary(left, 'left')}px`);\r\n    this.updateHostStyle('top', `${this.basedOnBoundary(top, 'top')}px`);\r\n    this.emitDrag(event.nativeEvent);\r\n  }\r\n\r\n  /**\r\n   * Updates the host style\r\n   */\r\n  private updateHostStyle(style: string, value: any): void {\r\n    this.renderer.setStyle(this.elementRef.nativeElement, style, value);\r\n  }\r\n\r\n  /**\r\n   * Emits drag event to the {@link ngxDragged}\r\n   */\r\n  private emitDrag(nativeEvent?: Event): void {\r\n    const rect = this.elementRef.nativeElement.getBoundingClientRect();\r\n    const parentRect = this.elementRef.nativeElement.parentElement?.getBoundingClientRect();\r\n\r\n    this.ngxDragged.emit({\r\n      // nativeEvent,    \r\n      parentRect,\r\n      top: rect.top,\r\n      right: rect.right,\r\n      bottom: rect.bottom,\r\n      left: rect.left,\r\n    });\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  OnDestroy,\r\n  Optional,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport {NgxDragDirective} from './drag.directive';\r\n\r\n/**\r\n * The directive that allows to mark HTML element as handle of dragging element for {@link NgxDragDirective}\r\n *\r\n * @author Dmytro Parfenov <dmitryparfenov937@gmail.com>\r\n *\r\n * @dynamic\r\n * @see https://angular.io/guide/angular-compiler-options#strictmetadataemit\r\n */\r\n@Directive({\r\n  selector: '[ngxDragHandle]',\r\n})\r\nexport class NgxDragHandleDirective implements AfterViewInit, OnDestroy {\r\n  constructor(\r\n    private readonly elementRef: ElementRef<HTMLElement>,\r\n    @Optional() private readonly dragDirective: NgxDragDirective,\r\n    @Inject(PLATFORM_ID) private readonly platformId: object\r\n  ) {}\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  ngAfterViewInit(): void {\r\n    this.observe();\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.observe();\r\n  }\r\n\r\n  /**\r\n   * Sets host element as observable point for {@link NgxDragDirective}\r\n   */\r\n  private observe(): void {\r\n    if (isPlatformServer(this.platformId) || !this.dragDirective) {\r\n      return;\r\n    }\r\n\r\n    this.dragDirective.observe(this.elementRef.nativeElement);\r\n  }\r\n}\r\n","export enum NgxResizeHandleType {\r\n  TopLeft = 'top-left',\r\n  Top = 'top',\r\n  TopRight = 'top-right',\r\n  Right = 'right',\r\n  BottomRight = 'bottom-right',\r\n  Bottom = 'bottom',\r\n  BottomLeft = 'bottom-left',\r\n  Left = 'left',\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  PLATFORM_ID,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { fromEvent, Subject, Subscription } from 'rxjs';\r\nimport { DOCUMENT, isPlatformServer } from '@angular/common';\r\nimport { filter, map, switchMap, takeUntil, tap } from 'rxjs/operators';\r\nimport {BoundaryDirective} from '../shared/boundary/boundary.directive';\r\nimport {Axis} from '../core/axis';\r\nimport {PositionType} from './position-type';\r\nimport {NgxResize} from './resize';\r\nimport {DragService} from '../core/drag.service';\r\nimport {WINDOW} from '../core/window.token';\r\nimport {MovementBase} from '../core/movement/movement-base';\r\nimport {Movement} from '../core/movement/movement';\r\nimport {PositionBase} from '../core/position-base';\r\nimport {Boundary} from '../shared/boundary/boundary';\r\nimport {Scale} from './scale';\r\nimport {NgxResizeHandleType} from './resize-handle-type.enum';\r\n\r\n/**\r\n * The directive that allows to resize HTML element on page\r\n *\r\n * @author Dmytro Parfenov <dmitryparfenov937@gmail.com>\r\n *\r\n * @dynamic\r\n * @see https://angular.io/guide/angular-compiler-options#strictmetadataemit\r\n */\r\n@Directive({\r\n  selector: '[ngxResize]',\r\n})\r\nexport class NgxResizeDirective extends BoundaryDirective implements AfterViewInit, OnDestroy {\r\n\r\n  /**\r\n   * Emits when directive was destroyed\r\n   */\r\n  private destroy$ = new Subject();\r\n\r\n  /**\r\n   * Emits next every time when behaviour for wheel event was changed\r\n   */\r\n  private wheelBehaviourChange$ = new Subject();\r\n\r\n  /**\r\n   * Emits next every time when behaviour for touches event was changed\r\n   */\r\n  private touchBehaviourChange$ = new Subject();\r\n\r\n  /**\r\n   * An array of observers which affect on resizable element\r\n   */\r\n  private observers: { subscription: Subscription; element: HTMLElement }[] = [];\r\n\r\n  /**\r\n   * A regular expression for keyboard code\r\n   */\r\n  private wheelInitiatorRegExp: RegExp | null = null;\r\n\r\n  /**\r\n   * Make a resize unavailable by wheel\r\n   */\r\n  private isWheelDisabled = false;\r\n\r\n  /**\r\n   * Make a resize unavailable by touches\r\n   */\r\n  private isTouchesDisabled = false;\r\n\r\n  /**\r\n   * Minimal width in px\r\n   */\r\n  @Input() ngxResizeMinWidth = 0;\r\n\r\n  /**\r\n   * Minimal height in px\r\n   */\r\n  @Input() ngxResizeMinHeight = 0;\r\n\r\n  /**\r\n   * Aspect ratio the element will use during resize\r\n   *\r\n   * @example\r\n   * 16/9 - 9/16 * 100 = 56.25\r\n   * 1/1 - 1/1 * 100 = 100\r\n   */\r\n  @Input() ngxResizeAspectRatio = 0;\r\n\r\n  /**\r\n   * Disables any resize events\r\n   */\r\n  @Input() ngxResizeDisabled = false;\r\n\r\n  /**\r\n   * Locks axis for the resize\r\n   */\r\n  @Input() ngxResizeLockAxis: Axis = null;\r\n\r\n  /**\r\n   * Constrain of the resizing area.\r\n   * Can be as a HTMLElement or CSS selector.\r\n   * You can put 'window' string to define window object as a constrain.\r\n   */\r\n  @Input() set ngxResizeBoundary(boundary: string | HTMLElement) {\r\n    this.boundary = boundary;\r\n  }\r\n\r\n  /**\r\n   * A regular expression that matches with keyboard key code.\r\n   * When value is provided the element can be scaled by 'Key + wheel'.\r\n   * If value not provided the element can be scaled just by 'wheel'.\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\r\n   */\r\n  @Input() set ngxResizeWheelInitiatorRegExp(pattern: RegExp | string) {\r\n    if (!pattern) {\r\n      this.wheelInitiatorRegExp = null;\r\n      this.subscribeForWheelEvent();\r\n      return;\r\n    }\r\n\r\n    this.wheelInitiatorRegExp = new RegExp(pattern);\r\n    this.subscribeForWheelEvent();\r\n  }\r\n\r\n  /**\r\n   * Disables resize by wheel.\r\n   * By default is 'false'.\r\n   */\r\n  @Input() set ngxResizeWheelDisabled(disabled: boolean) {\r\n    this.isWheelDisabled = disabled;\r\n    this.subscribeForWheelEvent();\r\n  }\r\n\r\n  /**\r\n   * Enables inversion for wheel event\r\n   */\r\n  @Input() ngxResizeWheelInverse = false;\r\n\r\n  /**\r\n   * Disables resize by touches.\r\n   * By default is 'false'.\r\n   * Resize work by using two fingers.\r\n   */\r\n  @Input() set ngxResizeTouchesDisabled(disabled: boolean) {\r\n    this.isTouchesDisabled = disabled;\r\n    this.subscribeForTouchEvents();\r\n  }\r\n\r\n  /**\r\n   * Position CSS style. Allows 'absolute' and 'fixed'. Default is 'absolute'.\r\n   * Will be applied to host element.\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/position\r\n   */\r\n  @HostBinding('style.position')\r\n  @Input()\r\n  ngxResizePosition: PositionType = 'absolute';\r\n\r\n  /**\r\n   * Emits changes when element was resized\r\n   */\r\n  @Output() ngxResized = new EventEmitter<NgxResize>();\r\n\r\n  constructor(\r\n    readonly elementRef: ElementRef<HTMLElement>,\r\n    private readonly renderer: Renderer2,\r\n    private readonly dragService: DragService,\r\n    @Inject(DOCUMENT) private readonly document: Document,\r\n    @Inject(WINDOW) private readonly window: Window,\r\n    @Inject(PLATFORM_ID) private readonly platformId: object\r\n  ) {\r\n    super(window, document);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  ngAfterViewInit(): void {\r\n    if (isPlatformServer(this.platformId)) {\r\n      return;\r\n    }\r\n\r\n    this.initialResize();\r\n    this.subscribeForWheelEvent();\r\n    this.subscribeForTouchEvents();\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next(true);\r\n    this.destroy$.complete();\r\n    this.wheelBehaviourChange$.complete();\r\n    this.touchBehaviourChange$.complete();\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from the element dragging and remove it from an array of observable objects\r\n   */\r\n  unsubscribe(target: HTMLElement): void {\r\n    const indexOf = this.observers.findIndex((item) => item.element === target);\r\n\r\n    if (indexOf < 0) {\r\n      return;\r\n    }\r\n\r\n    this.observers[indexOf].subscription.unsubscribe();\r\n    this.observers.splice(indexOf, 1);\r\n  }\r\n\r\n  /**\r\n   * Observe the element dragging which will be as handle for resize\r\n   */\r\n  observe(target: HTMLElement): void {\r\n    if (!this.resolveInitiatorType(target)) {\r\n      return;\r\n    }\r\n\r\n    let hostElementRect = this.elementRef.nativeElement.getBoundingClientRect();\r\n    let eventInitial: PositionBase | null = null;\r\n\r\n    const subscription$ = this.dragService\r\n      .fromElement(target)\r\n      .pipe(\r\n        tap((event) => event.nativeEvent.preventDefault()),\r\n        tap((event) => event.nativeEvent.stopImmediatePropagation()),\r\n        map<MovementBase, Movement>((event) => {\r\n          if (\r\n            !eventInitial ||\r\n            eventInitial.x !== event.initial.x ||\r\n            eventInitial.y !== event.initial.y\r\n          ) {\r\n            eventInitial = event.initial;\r\n            hostElementRect = this.elementRef.nativeElement.getBoundingClientRect();\r\n          }\r\n\r\n          const offsetFromHost = {\r\n            top: event.initial.y - hostElementRect.top,\r\n            left: event.initial.x - hostElementRect.left,\r\n            bottom: hostElementRect.bottom - event.initial.y,\r\n            right: hostElementRect.right - event.initial.x,\r\n          } as Boundary;\r\n\r\n          return {\r\n            ...event,\r\n            initiator: target,\r\n            offsetFromHost,\r\n            initial: event.initial,\r\n            nativeEvent: event.nativeEvent,\r\n          };\r\n        }),\r\n        tap(this.onResize.bind(this)),\r\n        takeUntil(this.destroy$)\r\n      )\r\n      .subscribe();\r\n\r\n    this.observers.push({ subscription: subscription$, element: target });\r\n  }\r\n\r\n  /**\r\n   * Starts the subscription for touch events\r\n   */\r\n  private subscribeForTouchEvents(): void {\r\n    this.touchBehaviourChange$.next(true);\r\n\r\n    if (this.isTouchesDisabled || isPlatformServer(this.platformId)) {\r\n      return;\r\n    }\r\n\r\n    let prevDistance = 0;\r\n\r\n    const touchStart$ = fromEvent<TouchEvent>(this.elementRef.nativeElement, 'touchstart').pipe(\r\n      filter((event) => event.targetTouches.length === 2)\r\n    );\r\n\r\n    const touchEnd$ = fromEvent<TouchEvent>(this.elementRef.nativeElement, 'touchend');\r\n\r\n    const touchMove$ = fromEvent<TouchEvent>(this.elementRef.nativeElement, 'touchmove', {\r\n      passive: false,\r\n    }).pipe(\r\n      tap((event) => event.preventDefault()),\r\n      filter((event) => event.targetTouches.length === 2 && event.changedTouches.length === 2)\r\n    );\r\n\r\n    touchStart$\r\n      .pipe(\r\n        tap(\r\n          (event) => {\r\n            const aTouch = event.targetTouches.item(0);\r\n            const bTouch = event.targetTouches.item(1);\r\n\r\n            if (!aTouch || !bTouch) {\r\n              return;\r\n            }\r\n\r\n            prevDistance = this.touchesDistance(aTouch, bTouch);\r\n          }),\r\n        switchMap(() =>\r\n          touchMove$.pipe(\r\n            tap((event) => {\r\n              const aTouch = event.targetTouches.item(0);\r\n              const bTouch = event.targetTouches.item(1);\r\n\r\n              if (!aTouch || !bTouch) {\r\n                return;\r\n              }\r\n\r\n              const distance = this.touchesDistance(aTouch, bTouch);\r\n\r\n              this.onScale({ delta: distance - prevDistance }, event);\r\n\r\n              prevDistance = distance;\r\n            }),\r\n            takeUntil(touchEnd$)\r\n          )\r\n        ),\r\n        takeUntil(this.destroy$),\r\n        takeUntil(this.touchBehaviourChange$)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Returns distance between two touches\r\n   */\r\n  private touchesDistance(a: Touch, b: Touch): number {\r\n    return Math.sqrt(Math.pow(b.clientX - a.clientX, 2) + Math.pow(b.clientY - a.clientY, 2));\r\n  }\r\n\r\n  /**\r\n   * Make a subscription for wheel events\r\n   */\r\n  private subscribeForWheelEvent(): void {\r\n    this.wheelBehaviourChange$.next(true);\r\n\r\n    if (this.isWheelDisabled || isPlatformServer(this.platformId)) {\r\n      return;\r\n    }\r\n\r\n    const wheel$ = fromEvent<WheelEvent>(this.elementRef.nativeElement, 'wheel').pipe(\r\n      tap((event) => event.preventDefault()),\r\n      tap((event) => {\r\n        const delta = this.ngxResizeWheelInverse ? event.deltaY : event.deltaY * -1;\r\n        this.onScale({ delta }, event);\r\n      }),\r\n      takeUntil(this.wheelBehaviourChange$),\r\n      takeUntil(this.destroy$)\r\n    );\r\n\r\n    if (!this.wheelInitiatorRegExp) {\r\n      wheel$.subscribe();\r\n      return;\r\n    }\r\n\r\n    const wheelInitiatorFilter = filter<KeyboardEvent>((event) =>\r\n      this.wheelInitiatorRegExp ? this.wheelInitiatorRegExp.test(event.code) : true);\r\n\r\n    const wheelInitiatorStart$ = fromEvent<KeyboardEvent>(this.window, 'keydown').pipe(\r\n      wheelInitiatorFilter\r\n    );\r\n\r\n    const wheelInitiatorEnd$ = fromEvent<KeyboardEvent>(this.window, 'keyup').pipe(\r\n      wheelInitiatorFilter\r\n    );\r\n\r\n    wheelInitiatorStart$\r\n      .pipe(\r\n        switchMap(() => wheel$.pipe(takeUntil(wheelInitiatorEnd$))),\r\n        takeUntil(this.wheelBehaviourChange$),\r\n        takeUntil(this.destroy$)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Runs initial resize for the host element\r\n   */\r\n  private initialResize(): void {\r\n    setTimeout(() => {\r\n      this.onScale({ delta: 0 });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts the calculation of scale event and changes host size\r\n   */\r\n  private onScale(scale: Scale, nativeEvent?: Event): void {\r\n    const hostElementRect = this.elementRef.nativeElement.getBoundingClientRect();\r\n\r\n    const boundaryRect = this.getBoundary();\r\n\r\n    let maxUpscale = scale.delta;\r\n\r\n    if (boundaryRect) {\r\n      maxUpscale = Math.floor(\r\n        Math.min(\r\n          hostElementRect.top - boundaryRect.top,\r\n          boundaryRect.right - hostElementRect.right,\r\n          boundaryRect.bottom - hostElementRect.bottom,\r\n          hostElementRect.left - boundaryRect.left\r\n        )\r\n      );\r\n    }\r\n\r\n    const maxDownscale =\r\n      Math.max(\r\n        0,\r\n        Math.min(\r\n          hostElementRect.width - this.ngxResizeMinWidth,\r\n          hostElementRect.height - this.ngxResizeMinHeight\r\n        )\r\n      ) * -1;\r\n\r\n    const delta = Math.max(maxDownscale, Math.min(maxUpscale, scale.delta));\r\n\r\n    let top = hostElementRect.top - delta / 2;\r\n    let left = hostElementRect.left - delta / 2;\r\n\r\n    if (boundaryRect) {\r\n      top = Math.max(boundaryRect.top, top);\r\n      left = Math.max(boundaryRect.left, left);\r\n    }\r\n\r\n    let height = hostElementRect.height + delta;\r\n    let width = hostElementRect.width + delta;\r\n\r\n    if (boundaryRect) {\r\n      height = Math.min(boundaryRect.bottom - top, height);\r\n      width = Math.min(boundaryRect.right - left, width);\r\n    }\r\n\r\n    if (this.ngxResizeLockAxis === 'x') {\r\n      left = hostElementRect.left;\r\n      width = hostElementRect.width;\r\n    }\r\n\r\n    if (this.ngxResizeLockAxis === 'y') {\r\n      top = hostElementRect.top;\r\n      height = hostElementRect.height;\r\n    }\r\n\r\n    const proportionalSize =\r\n      this.ngxResizeLockAxis === 'y'\r\n        ? this.fromWidthProportion(width)\r\n        : this.fromHeightProportion(height);\r\n\r\n    if (proportionalSize && this.ngxResizeLockAxis === 'y') {\r\n      height = proportionalSize;\r\n      top = hostElementRect.top - (height - hostElementRect.height) / 2;\r\n    }\r\n\r\n    if (proportionalSize && this.ngxResizeLockAxis !== 'y') {\r\n      width = proportionalSize;\r\n      left = hostElementRect.left - (width - hostElementRect.width) / 2;\r\n    }\r\n\r\n    if (\r\n      boundaryRect &&\r\n      (top <= boundaryRect.top ||\r\n        top + height >= boundaryRect.bottom ||\r\n        left <= boundaryRect.left ||\r\n        left + width >= boundaryRect.right)\r\n    ) {\r\n      top = hostElementRect.top;\r\n      height = hostElementRect.height;\r\n      left = hostElementRect.left;\r\n      width = hostElementRect.width;\r\n    }\r\n\r\n    this.updateHostStyle('left', `${this.basedOnBoundary(left, 'left')}px`);\r\n    this.updateHostStyle('width', `${width}px`);\r\n    this.updateHostStyle('top', `${this.basedOnBoundary(top, 'top')}px`);\r\n    this.updateHostStyle('height', `${height}px`);\r\n    this.emitResize(nativeEvent);\r\n  }\r\n\r\n  /**\r\n   * Check whether is resize is available for current initiator type\r\n   */\r\n  private canResize(initiatorType: NgxResizeHandleType): boolean {\r\n    switch (initiatorType) {\r\n      case NgxResizeHandleType.TopLeft:\r\n      case NgxResizeHandleType.TopRight:\r\n      case NgxResizeHandleType.BottomLeft:\r\n      case NgxResizeHandleType.BottomRight:\r\n        return !this.ngxResizeLockAxis;\r\n      case NgxResizeHandleType.Left:\r\n      case NgxResizeHandleType.Right:\r\n        return this.ngxResizeLockAxis !== 'x';\r\n      case NgxResizeHandleType.Top:\r\n      case NgxResizeHandleType.Bottom:\r\n        return this.ngxResizeLockAxis !== 'y';\r\n    }\r\n\r\n    return !this.ngxResizeLockAxis;\r\n  }\r\n\r\n  /**\r\n   * Starts the calculation of resize event and changes host size\r\n   */\r\n  private onResize(event: Movement): void {\r\n    if (this.ngxResizeDisabled) {\r\n      return;\r\n    }\r\n\r\n    const initiatorType = this.resolveInitiatorType(event.initiator);\r\n\r\n    if (!initiatorType || !this.canResize(initiatorType)) {\r\n      return;\r\n    }\r\n\r\n    const hostElementRect = this.elementRef.nativeElement.getBoundingClientRect();\r\n\r\n    const boundaryRect = this.getBoundary();\r\n\r\n    if (!boundaryRect) {\r\n      return;\r\n    }\r\n\r\n    switch (initiatorType) {\r\n      case NgxResizeHandleType.TopLeft:\r\n        return this.topLeftMovement(event, hostElementRect, boundaryRect);\r\n      case NgxResizeHandleType.Top:\r\n        return this.topMovement(event, hostElementRect, boundaryRect);\r\n      case NgxResizeHandleType.TopRight:\r\n        return this.topRightMovement(event, hostElementRect, boundaryRect);\r\n      case NgxResizeHandleType.Right:\r\n        return this.rightMovement(event, hostElementRect, boundaryRect);\r\n      case NgxResizeHandleType.BottomRight:\r\n        return this.bottomRightMovement(event, hostElementRect, boundaryRect);\r\n      case NgxResizeHandleType.Bottom:\r\n        return this.bottomMovement(event, hostElementRect, boundaryRect);\r\n      case NgxResizeHandleType.BottomLeft:\r\n        return this.bottomLeftMovement(event, hostElementRect, boundaryRect);\r\n      case NgxResizeHandleType.Left:\r\n        return this.leftMovement(event, hostElementRect, boundaryRect);\r\n    }\r\n  }\r\n\r\n  private topLeftMovement(event: Movement, hostElementRect: DOMRect, boundaryRect: Boundary): void {\r\n    if (this.ngxResizeAspectRatio) {\r\n      this.topMovement(event, hostElementRect, boundaryRect);\r\n      return;\r\n    }\r\n\r\n    this.topMovement(event, hostElementRect, boundaryRect);\r\n    this.leftMovement(event, hostElementRect, boundaryRect);\r\n  }\r\n\r\n  private topRightMovement(event: Movement, hostElementRect: DOMRect, boundaryRect: Boundary): void {\r\n    if (this.ngxResizeAspectRatio) {\r\n      this.topMovement(event, hostElementRect, boundaryRect);\r\n      return;\r\n    }\r\n\r\n    this.topMovement(event, hostElementRect, boundaryRect);\r\n    this.rightMovement(event, hostElementRect, boundaryRect);\r\n  }\r\n\r\n  private bottomRightMovement(event: Movement, hostElementRect: DOMRect, boundaryRect: Boundary): void {\r\n    if (this.ngxResizeAspectRatio) {\r\n      this.bottomMovement(event, hostElementRect, boundaryRect);\r\n      return;\r\n    }\r\n\r\n    this.bottomMovement(event, hostElementRect, boundaryRect);\r\n    this.rightMovement(event, hostElementRect, boundaryRect);\r\n  }\r\n\r\n  private bottomLeftMovement(event: Movement, hostElementRect: DOMRect, boundaryRect: Boundary): void {\r\n    if (this.ngxResizeAspectRatio) {\r\n      this.bottomMovement(event, hostElementRect, boundaryRect);\r\n      return;\r\n    }\r\n\r\n    this.bottomMovement(event, hostElementRect, boundaryRect);\r\n    this.leftMovement(event, hostElementRect, boundaryRect);\r\n  }\r\n\r\n  private topMovement(event: Movement, hostElementRect: DOMRect, boundaryRect: Boundary): void {\r\n    let y = event.y - event.offsetFromHost.top;\r\n\r\n    if (boundaryRect) {\r\n      y = Math.max(boundaryRect.top, Math.min(y, boundaryRect.bottom));\r\n    }\r\n\r\n    let top = Math.min(y, hostElementRect.bottom - this.ngxResizeMinHeight);\r\n    let height = hostElementRect.height - (top - hostElementRect.top);\r\n\r\n    const initiatorType = this.resolveInitiatorType(event.initiator);\r\n\r\n    const widthProportions = initiatorType ? this.getWidthProportions(boundaryRect, hostElementRect, initiatorType, height) : null;\r\n\r\n    if (widthProportions) {\r\n      top = top + (height - this.fromWidthProportion(widthProportions.width));\r\n      height = Math.min(height, this.fromWidthProportion(widthProportions.width));\r\n    }\r\n\r\n    this.updateHostStyle('top', `${this.basedOnBoundary(top, 'top')}px`);\r\n    this.updateHostStyle('height', `${height}px`);\r\n\r\n    if (widthProportions) {\r\n      this.updateHostStyle('left', `${this.basedOnBoundary(widthProportions.left, 'left')}px`);\r\n      this.updateHostStyle('width', `${widthProportions.width}px`);\r\n    }\r\n\r\n    this.emitResize(event.nativeEvent);\r\n  }\r\n\r\n  private rightMovement(event: Movement, hostElementRect: DOMRect, boundaryRect: Boundary): void {\r\n    let x = event.x + event.offsetFromHost.right;\r\n\r\n    if (boundaryRect) {\r\n      x = Math.max(boundaryRect.left, Math.min(x, boundaryRect.right));\r\n    }\r\n\r\n    let width = Math.max(this.ngxResizeMinWidth, x - hostElementRect.left);\r\n\r\n    if (boundaryRect) {\r\n      width = Math.min(width, boundaryRect.right - hostElementRect.left);\r\n    }\r\n\r\n    const initiatorType = this.resolveInitiatorType(event.initiator);\r\n\r\n    const heightProportions = initiatorType ? this.getHeightProportions(boundaryRect, hostElementRect, initiatorType, width) : null;\r\n\r\n    if (heightProportions) {\r\n      width = Math.min(width, this.fromHeightProportion(heightProportions.height));\r\n    }\r\n\r\n    this.updateHostStyle('width', `${width}px`);\r\n\r\n    if (heightProportions) {\r\n      this.updateHostStyle('top', `${this.basedOnBoundary(heightProportions.top, 'top')}px`);\r\n      this.updateHostStyle('height', `${heightProportions.height}px`);\r\n    }\r\n\r\n    this.emitResize(event.nativeEvent);\r\n  }\r\n\r\n  private bottomMovement(event: Movement, hostElementRect: DOMRect, boundaryRect: Boundary): void {\r\n    let y = event.y + event.offsetFromHost.bottom;\r\n\r\n    if (boundaryRect) {\r\n      y = Math.max(boundaryRect.top, Math.min(y, boundaryRect.bottom));\r\n    }\r\n\r\n    let height = Math.max(this.ngxResizeMinHeight, y - hostElementRect.top);\r\n\r\n    if (boundaryRect) {\r\n      height = Math.min(height, boundaryRect.bottom - hostElementRect.top);\r\n    }\r\n\r\n    const initiatorType = this.resolveInitiatorType(event.initiator);\r\n\r\n    const widthProportions = initiatorType ? this.getWidthProportions(boundaryRect, hostElementRect, initiatorType, height) : null;\r\n\r\n    if (widthProportions) {\r\n      height = Math.min(height, this.fromWidthProportion(widthProportions.width));\r\n    }\r\n\r\n    this.updateHostStyle('height', `${height}px`);\r\n\r\n    if (widthProportions) {\r\n      this.updateHostStyle('left', `${this.basedOnBoundary(widthProportions.left, 'left')}px`);\r\n      this.updateHostStyle('width', `${widthProportions.width}px`);\r\n    }\r\n\r\n    this.emitResize(event.nativeEvent);\r\n  }\r\n\r\n  private leftMovement(event: Movement, hostElementRect: DOMRect, boundaryRect: Boundary): void {\r\n    let x = event.x - event.offsetFromHost.left;\r\n\r\n    if (boundaryRect) {\r\n      x = Math.max(boundaryRect.left, Math.min(x, boundaryRect.right));\r\n    }\r\n\r\n    let left = Math.min(x, hostElementRect.right - this.ngxResizeMinWidth);\r\n    let width = hostElementRect.width - (left - hostElementRect.left);\r\n\r\n    const initiatorType = this.resolveInitiatorType(event.initiator);\r\n\r\n    const heightProportions = initiatorType ? this.getHeightProportions(boundaryRect, hostElementRect, initiatorType, width) : null;\r\n\r\n    if (heightProportions) {\r\n      left = left + (width - this.fromHeightProportion(heightProportions.height));\r\n      width = Math.min(width, this.fromHeightProportion(heightProportions.height));\r\n    }\r\n\r\n    this.updateHostStyle('left', `${this.basedOnBoundary(left, 'left')}px`);\r\n    this.updateHostStyle('width', `${width}px`);\r\n\r\n    if (heightProportions) {\r\n      this.updateHostStyle('top', `${this.basedOnBoundary(heightProportions.top, 'top')}px`);\r\n      this.updateHostStyle('height', `${heightProportions.height}px`);\r\n    }\r\n\r\n    this.emitResize(event.nativeEvent);\r\n  }\r\n\r\n  /**\r\n   * Get position and size of width\r\n   */\r\n  private getWidthProportions(\r\n    boundaryRect: Boundary,\r\n    hostElementRect: DOMRect,\r\n    type: NgxResizeHandleType,\r\n    height: number\r\n  ): {\r\n    left: number;\r\n    width: number;\r\n  } | null {\r\n    let width = this.fromHeightProportion(height);\r\n\r\n    if (!width) {\r\n      return null;\r\n    }\r\n\r\n    if (type !== NgxResizeHandleType.TopLeft && type !== NgxResizeHandleType.BottomLeft) {\r\n      width = boundaryRect ? Math.min(width, boundaryRect.right - hostElementRect.left) : width;\r\n    }\r\n\r\n    if (type !== NgxResizeHandleType.TopRight && type !== NgxResizeHandleType.BottomRight) {\r\n      width = boundaryRect ? Math.min(width, hostElementRect.right - boundaryRect.left) : width;\r\n    }\r\n\r\n    let left = hostElementRect.left;\r\n\r\n    if (type === NgxResizeHandleType.TopLeft || type === NgxResizeHandleType.BottomLeft) {\r\n      left = left - (width - hostElementRect.width);\r\n    }\r\n\r\n    if (type === NgxResizeHandleType.Top || type === NgxResizeHandleType.Bottom) {\r\n      left = left - (width - hostElementRect.width) / 2;\r\n    }\r\n\r\n    return { left, width };\r\n  }\r\n\r\n  /**\r\n   * Get position and size of height\r\n   */\r\n  private getHeightProportions(\r\n    boundaryRect: Boundary,\r\n    hostElementRect: DOMRect,\r\n    type: NgxResizeHandleType,\r\n    width: number\r\n  ): {\r\n    top: number;\r\n    height: number;\r\n  } | null {\r\n    let height = this.fromWidthProportion(width);\r\n\r\n    if (!height) {\r\n      return null;\r\n    }\r\n\r\n    if (type !== NgxResizeHandleType.TopLeft && type !== NgxResizeHandleType.TopRight) {\r\n      height = boundaryRect ? Math.min(height, boundaryRect.bottom - hostElementRect.top) : height;\r\n    }\r\n\r\n    if (type !== NgxResizeHandleType.BottomLeft && type !== NgxResizeHandleType.BottomRight) {\r\n      height = boundaryRect ? Math.min(height, hostElementRect.bottom - boundaryRect.top) : height;\r\n    }\r\n\r\n    let top = hostElementRect.top;\r\n\r\n    if (type === NgxResizeHandleType.TopLeft || type === NgxResizeHandleType.TopRight) {\r\n      top = top - (height - hostElementRect.height);\r\n    }\r\n\r\n    if (type === NgxResizeHandleType.Left || type === NgxResizeHandleType.Right) {\r\n      top = top - (height - hostElementRect.height) / 2;\r\n    }\r\n\r\n    return { top, height };\r\n  }\r\n\r\n  /**\r\n   * Get width based on {@link ngxResizeAspectRatio} from height\r\n   */\r\n  private fromHeightProportion(height: number): number {\r\n    return !this.ngxResizeAspectRatio ? 0 : Math.floor((height / this.ngxResizeAspectRatio) * 100);\r\n  }\r\n\r\n  /**\r\n   * Get height based on {@link ngxResizeAspectRatio} from width\r\n   */\r\n  private fromWidthProportion(width: number): number {\r\n    return !this.ngxResizeAspectRatio ? 0 : Math.floor((width * this.ngxResizeAspectRatio) / 100);\r\n  }\r\n\r\n  /**\r\n   * Updates host element style\r\n   */\r\n  private updateHostStyle(style: string, value: any): void {\r\n    this.renderer.setStyle(this.elementRef.nativeElement, style, value);\r\n  }\r\n\r\n  /**\r\n   * Resolves the type of handle HTML element\r\n   */\r\n  private resolveInitiatorType(initiator: HTMLElement): NgxResizeHandleType | null {\r\n    return initiator.getAttribute('data-ngx-resize-handle-type') as NgxResizeHandleType;\r\n  }\r\n\r\n  /**\r\n   * Emits resize event to the {@link ngxResized}\r\n   */\r\n  private emitResize(nativeEvent?: Event): void {\r\n    const rect = this.elementRef.nativeElement.getBoundingClientRect();\r\n    const parentRect = this.elementRef.nativeElement.parentElement?.getBoundingClientRect()\r\n\r\n    this.ngxResized.emit({\r\n      // nativeEvent,\r\n      parentRect,\r\n      top: rect.top,\r\n      right: rect.right,\r\n      bottom: rect.bottom,\r\n      left: rect.left,\r\n    });\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  HostBinding,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport {NgxResizeHandleType} from './resize-handle-type.enum';\r\nimport {NgxResizeDirective} from './resize.directive';\r\n\r\n/**\r\n * The directive that allows to mark HTML element as one of handle of resizing element for {@link NgxResizeDirective}\r\n *\r\n * @author Dmytro Parfenov <dmitryparfenov937@gmail.com>\r\n *\r\n * @dynamic\r\n * @see https://angular.io/guide/angular-compiler-options#strictmetadataemit\r\n */\r\n@Directive({\r\n  selector: '[ngxResizeHandle]',\r\n})\r\nexport class NgxResizeHandleDirective implements AfterViewInit, OnDestroy {\r\n  /**\r\n   * Sets the attribute which define the side the HTML element will affect during drag\r\n   */\r\n  @Input('ngxResizeHandle')\r\n  @HostBinding('attr.data-ngx-resize-handle-type')\r\n  type: NgxResizeHandleType | null = null;\r\n\r\n  constructor(\r\n    private readonly elementRef: ElementRef<HTMLElement>,\r\n    @Inject(PLATFORM_ID) private readonly platformId: object,\r\n    @Optional() private readonly resizeDirective: NgxResizeDirective\r\n  ) {}\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  ngAfterViewInit(): void {\r\n    if (isPlatformServer(this.platformId) || !this.resizeDirective) {\r\n      return;\r\n    }\r\n\r\n    this.resizeDirective.observe(this.elementRef.nativeElement);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  ngOnDestroy(): void {\r\n    if (!this.resizeDirective) {\r\n      return;\r\n    }\r\n\r\n    this.resizeDirective.unsubscribe(this.elementRef.nativeElement);\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {BoundaryDirective} from './boundary/boundary.directive';\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\n@NgModule({\r\n  declarations: [\r\n    BoundaryDirective\r\n  ],\r\n  exports: [\r\n    BoundaryDirective\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n","import {NgModule} from '@angular/core';\r\nimport {NgxDragDirective} from './drag/drag.directive';\r\nimport {NgxDragHandleDirective} from './drag/drag-handle.directive';\r\nimport {NgxResizeDirective} from './resize/resize.directive';\r\nimport {NgxResizeHandleDirective} from './resize/resize-handle.directive';\r\nimport {SharedModule} from './shared/shared.module';\r\n\r\n/**\r\n * The module provides opportunity to use drag and resize functionality on HTML elements\r\n *\r\n * @author Dmytro Parfenov <dmitryparfenov937@gmail.com>\r\n */\r\n@NgModule({\r\n  imports: [\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    NgxDragDirective,\r\n    NgxDragHandleDirective,\r\n    NgxResizeDirective,\r\n    NgxResizeHandleDirective\r\n  ],\r\n  exports: [NgxDragDirective, NgxDragHandleDirective, NgxResizeDirective, NgxResizeHandleDirective]\r\n})\r\nexport class NgxDragResizeModule { }\r\n","/*\r\n * Public API Surface of ngx-drag-resize\r\n */\r\n\r\nexport * from './lib/drag-resize.module';\r\nexport * from './lib/drag/drag.directive';\r\nexport * from './lib/drag/drag-handle.directive';\r\nexport * from './lib/resize/resize.directive';\r\nexport * from './lib/resize/resize-handle.directive';\r\nexport * from './lib/resize/resize-handle-type.enum';\r\nexport * from './lib/drag/drag';\r\nexport * from './lib/resize/resize';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.DragService","i1.NgxResizeDirective"],"mappings":"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"}